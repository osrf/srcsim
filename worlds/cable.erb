<%
  # Template for solar panel cable for SRC finals world

  # Requires the following global variables:
  # $cable_frame, $array_z_offset

  # If $task is 1 or 3:
  # * Model is static
  # * No collisions
  # * No joints
  # * No plugins
  # * No sensors
  # * Link visuals placed as if they have fallen

  def printBlackMaterial()
    "<material>\n"\
    "  <ambient>0 0 0 1</ambient>\n"\
    "  <emissive>0 0 0 1</emissive>\n"\
    "  <diffuse>0 0 0 1</diffuse>\n"\
    "  <specular>1 1 1 1</specular>\n"\
    "</material>\n"
  end

  def printLightBlueMaterial()
    "<material>\n"\
    "  <ambient>0 0 0.3 1</ambient>\n"\
    "  <emissive>0 0 0.5 1</emissive>\n"\
    "  <diffuse>0 0 0.1 1</diffuse>\n"\
    "  <specular>1 1 1 1</specular>\n"\
    "</material>\n"
  end

  def printMidBlueMaterial()
    "<material>\n"\
    "  <ambient>0 0 0.7 1</ambient>\n"\
    "  <emissive>0 0 0 1</emissive>\n"\
    "  <diffuse>0 0 0.1 1</diffuse>\n"\
    "  <specular>1 1 1 1</specular>\n"\
    "</material>\n"
  end

  def printDarkBlueMaterial()
    "<material>\n"\
    "  <ambient>0 0 0.3 1</ambient>\n"\
    "  <emissive>0 0 0 1</emissive>\n"\
    "  <diffuse>0 0 0.1 1</diffuse>\n"\
    "  <specular>1 1 1 1</specular>\n"\
    "</material>\n"
  end

  radius = 0.010
  length = 0.1
  link_count = 16
  link_mass = 0.05
  min_inertia = 0.0001
  height = 0.85 + $array_z_offset
  theta = Math::PI * 0.3

  # plug
  outer_radius = radius * 2.5
  middle_radius = radius * 1.7
  inner_radius = radius * 1.4

  outer_length = length * 0.1
  middle_length = length * 0.2
  inner_length = length * 1.8

  pos_1 = inner_length * 0.9
  pos_2 = inner_length * 0.1
%>

<model name="solar_panel_cable">

<% if ($task == '1' || $task == '3') %>
  <static>true</static>
<% else %>
  <self_collide>true</self_collide>
<% end %>

  <pose>
    <%= $cable_frame[0, 2] %>
    <%= $cable_frame[1, 2] %>
    <%= height %>
    0
    0
    <%= Math::atan2($cable_frame[1, 0], $cable_frame[0, 0]) %>
  </pose>

  <link name="link_0">
<% if ($task == '0' || $task == '2') %>
    <inertial>
      <mass><%= link_mass %></mass>
      <inertia>
        <ixx><%= [(2 * link_mass * radius * radius) / 3, min_inertia].max %></ixx>
        <iyy><%= [(2 * link_mass * radius * radius) / 3, min_inertia].max %></iyy>
        <izz><%= [(2 * link_mass * radius * radius) / 3, min_inertia].max %></izz>
      </inertia>
    </inertial>
<% end %>
    <visual name="visual">
      <geometry>
        <sphere>
          <radius><%= radius * 2 %></radius>
        </sphere>
      </geometry>
      <%= printBlackMaterial() %>
    </visual>
  </link>

<%
    for link in 1..link_count
      x = (link - 1) * length * Math::cos(theta)

      if link % 2 == 0
        y = length * Math::sin(theta)
      else
        y = 0
      end

      if link % 4 == 0
        y = -y
      end

      if (link * 0.5).floor % 2 != 0
        t = -theta
      else
        t = theta
      end

      if link != link_count
        cylinder_length = length
        cylinder_radius = radius
        cylinder_material = printBlackMaterial()
      else
        cylinder_length = inner_length
        cylinder_radius = inner_radius
        cylinder_material = printDarkBlueMaterial()
      end

      link_pose = x.to_s + ' ' + y.to_s + ' 0 0 ' + (Math::PI * 0.5).to_s + ' ' + t.to_s

      # Predefined poses when it's only visuals to look like it naturally fell.
      if ($task == '1' || $task == '3')
        if link == 1
          link_pose = '-0 1e-06 0 -2.80462 1.1017 -2.19913'
        elsif link == 2
          link_pose = '0.07623 0.04867 -0.042666 3.01631 0.389371 1.96508'
        elsif link == 3
          link_pose = '0.102234 0.018696 -0.134456 2.15276 1.41466 1.18077'
        elsif link == 4
          link_pose = '0.158855 -0.063287 -0.143003 1.57068 1.52887 2.2955'
        elsif link == 5
          link_pose = '0.233716 0.003014 -0.143002 1.57078 1.52814 2.48127'
        elsif link == 6
          link_pose = '0.295052 0.081995 -0.143002 -1.57105 1.55762 -2.52998'
        elsif link == 7
          link_pose = '0.352491 0.000137 -0.143002 -1.571 1.55762 -2.51334'
        elsif link == 8
          link_pose = '0.411281 -0.080757 -0.143002 1.57165 1.56672 2.51172'
        elsif link == 9
          link_pose = '0.470254 4e-06 -0.143002 1.57099 1.56672 2.51398'
        elsif link == 10
          link_pose = '0.528991 0.080936 -0.143002 -1.57305 1.56954 -2.51577'
        elsif link == 11
          link_pose = '0.587749 1.9e-05 -0.143002 -1.57312 1.56954 -2.51451'
        elsif link == 12
          link_pose = '0.646616 -0.080819 -0.143002 1.57375 1.5704 2.51607'
        elsif link == 13
          link_pose = '0.705406 7.4e-05 -0.143002 1.58353 1.5704 2.54078'
        elsif link == 14
          link_pose = '0.762984 0.081836 -0.143002 -1.61202 1.57067 -2.5503'
        elsif link == 15
          link_pose = '0.822101 0.001181 -0.143002 0.030649 1.42018 -0.939112'
        elsif link == 16
          link_pose = '0.877983 -0.080381 -0.128004 -1.57062 1.42593 -0.586724'
        end
      end

      parent = link - 1
      child = link
%>

  <link name="link_<%= link %>">
    <pose><%= link_pose %></pose>
<% if ($task == '0' || $task == '2') %>
    <inertial>
      <pose>0 0 <%= length / 2 %> 0 0 0</pose>
      <mass><%= link_mass %></mass>
      <inertia>
        <ixx><%= [link_mass * ( 3 * radius * radius + length * length) /12, min_inertia].max %></ixx>
        <iyy><%= [link_mass * ( 3 * radius * radius + length * length) /12, min_inertia].max %></iyy>
        <izz><%= [link_mass * radius * radius * 0.5, min_inertia].max %></izz>
      </inertia>
    </inertial>

    <collision name="cylinder">
      <pose>0 0 <%= cylinder_length / 2 %> 0 0 0</pose>
      <geometry>
        <cylinder>
          <length><%= cylinder_length %></length>
          <radius><%= cylinder_radius %></radius>
        </cylinder>
      </geometry>
      <surface>
        <contact>
          <ode>
            <kp>1e5</kp>
            <kd>1</kd>
            <max_vel>0.1</max_vel>
            <min_depth>0.0015</min_depth>
          </ode>
        </contact>
        <friction>
          <ode>
            <mu>1.0</mu>
            <mu2>1.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
<% end %>
    <visual name="cylinder">
      <pose>0 0 <%= cylinder_length / 2 %> 0 0 0</pose>
      <geometry>
        <cylinder>
          <length><%= cylinder_length %></length>
          <radius><%= cylinder_radius %></radius>
        </cylinder>
      </geometry>
      <%= cylinder_material %>
    </visual>
<% if ($task == '0' || $task == '2') %>
    <collision name="sphere">
      <geometry>
        <sphere>
          <radius><%= cylinder_radius %></radius>
        </sphere>
      </geometry>
      <surface>
        <contact>
          <ode>
            <kp>1e5</kp>
            <kd>1</kd>
            <max_vel>0.1</max_vel>
            <min_depth>0.0015</min_depth>
          </ode>
        </contact>
        <friction>
          <ode>
            <mu>1.0</mu>
            <mu2>1.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
<% end %>

    <visual name="sphere">
      <geometry>
        <sphere>
          <radius><%= cylinder_radius %></radius>
        </sphere>
      </geometry>
      <%= cylinder_material %>
    </visual>

<%
      if link == link_count
        shapes = {}
        shapes["outer_1"] = {:length => outer_length, :radius => outer_radius, :pos => pos_1, :material => printLightBlueMaterial() }
        shapes["middle_1"] = {:length => middle_length, :radius => middle_radius, :pos => pos_1, :material => printMidBlueMaterial() }
        shapes["outer_2"] = {:length => outer_length, :radius => outer_radius, :pos => pos_2, :material => printLightBlueMaterial() }
        shapes["middle_2"] = {:length => middle_length, :radius => middle_radius, :pos => pos_2, :material => printMidBlueMaterial() }
        shapes.keys.each do |suffix|
          shape = shapes[suffix]
          shape_length = shape[:length]
          shape_radius = shape[:radius]
          shape_pos = shape[:pos]
          shape_material = shape[:material]
%>

<% if ($task == '0' || $task == '2') %>
    <collision name="plug_<%= suffix %>">
      <pose>0 0 <%= shape_pos %> 0 0 0</pose>
      <geometry>
        <cylinder>
          <length><%= shape_length %></length>
          <radius><%= shape_radius %></radius>
        </cylinder>
      </geometry>
      <surface>
        <contact>
          <ode>
            <kp>1e5</kp>
            <kd>1</kd>
            <max_vel>0.1</max_vel>
            <min_depth>0.0015</min_depth>
          </ode>
        </contact>
        <friction>
          <ode>
            <mu>1.0</mu>
            <mu2>1.0</mu2>
          </ode>
        </friction>
      </surface>
    </collision>
<% end %>

    <visual name="plug_<%= suffix %>">
      <pose>0 0 <%= shape_pos %> 0 0 0</pose>
      <geometry>
        <cylinder>
          <length><%= shape_length %></length>
          <radius><%= shape_radius %></radius>
        </cylinder>
      </geometry>
      <%= shape_material %>
    </visual>
<%      end %>
<% if ($task == '0' || $task == '2') %>
    <sensor name="tip_sensor" type="contact">
      <contact>
        <collision>plug_outer_1</collision>
        <collision>plug_outer_2</collision>
        <collision>plug_middle_1</collision>
        <collision>plug_middle_2</collision>
        <collision>cylinder</collision>
        <collision>sphere</collision>
      </contact>
    </sensor>
<% end %>

<%    end %>

  </link>

<% if ($task == '0' || $task == '2') %>
  <joint name="joint_<%= link %>" type="universal">
    <child>link_<%= child %></child>
    <parent>link_<%= parent %></parent>
    <axis>
      <xyz>0 1 0</xyz>
      <limit>
        <lower><%= -Math::PI * 0.5 %></lower>
        <upper><%= Math::PI * 0.5 %></upper>
      </limit>
    </axis>
    <axis2>
      <xyz>-1 0 0</xyz>
      <limit>
        <lower><%= -Math::PI * 0.5 %></lower>
        <upper><%= Math::PI * 0.5 %></upper>
      </limit>
    </axis2>
    <physics>
      <ode>
        <cfm_damping>1</cfm_damping>
      </ode>
    </physics>
  </joint>
<% end %>

<%  end %>

<% if ($task == '0' || $task == '2') %>
  <joint name="world" type="fixed">
    <child>link_0</child>
    <parent>world</parent>
  </joint>

  <plugin name="touch_valkyrie_cable" filename="libTouchPlugin.so">
    <sensor>tip_sensor</sensor>
    <target>valkyrie</target>
    <time>0.5</time>
    <namespace>task2/checkpoint4</namespace>
  </plugin>
<% end %>

</model>
